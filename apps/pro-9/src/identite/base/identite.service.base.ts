/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Identite as PrismaIdentite,
  Salarie as PrismaSalarie,
} from "@prisma/client";

export class IdentiteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IdentiteCountArgs, "select">): Promise<number> {
    return this.prisma.identite.count(args);
  }

  async identites(
    args: Prisma.IdentiteFindManyArgs
  ): Promise<PrismaIdentite[]> {
    return this.prisma.identite.findMany(args);
  }
  async identite(
    args: Prisma.IdentiteFindUniqueArgs
  ): Promise<PrismaIdentite | null> {
    return this.prisma.identite.findUnique(args);
  }
  async createIdentite(
    args: Prisma.IdentiteCreateArgs
  ): Promise<PrismaIdentite> {
    return this.prisma.identite.create(args);
  }
  async updateIdentite(
    args: Prisma.IdentiteUpdateArgs
  ): Promise<PrismaIdentite> {
    return this.prisma.identite.update(args);
  }
  async deleteIdentite(
    args: Prisma.IdentiteDeleteArgs
  ): Promise<PrismaIdentite> {
    return this.prisma.identite.delete(args);
  }

  async getSalarie(parentId: string): Promise<PrismaSalarie | null> {
    return this.prisma.identite
      .findUnique({
        where: { id: parentId },
      })
      .salarie();
  }
}
