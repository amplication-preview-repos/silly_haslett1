/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Telecom as PrismaTelecom,
  Salarie as PrismaSalarie,
} from "@prisma/client";

export class TelecomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TelecomCountArgs, "select">): Promise<number> {
    return this.prisma.telecom.count(args);
  }

  async telecoms(args: Prisma.TelecomFindManyArgs): Promise<PrismaTelecom[]> {
    return this.prisma.telecom.findMany(args);
  }
  async telecom(
    args: Prisma.TelecomFindUniqueArgs
  ): Promise<PrismaTelecom | null> {
    return this.prisma.telecom.findUnique(args);
  }
  async createTelecom(args: Prisma.TelecomCreateArgs): Promise<PrismaTelecom> {
    return this.prisma.telecom.create(args);
  }
  async updateTelecom(args: Prisma.TelecomUpdateArgs): Promise<PrismaTelecom> {
    return this.prisma.telecom.update(args);
  }
  async deleteTelecom(args: Prisma.TelecomDeleteArgs): Promise<PrismaTelecom> {
    return this.prisma.telecom.delete(args);
  }

  async getSalarie(parentId: string): Promise<PrismaSalarie | null> {
    return this.prisma.telecom
      .findUnique({
        where: { id: parentId },
      })
      .salarie();
  }
}
