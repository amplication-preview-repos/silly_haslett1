/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Telecom } from "./Telecom";
import { TelecomCountArgs } from "./TelecomCountArgs";
import { TelecomFindManyArgs } from "./TelecomFindManyArgs";
import { TelecomFindUniqueArgs } from "./TelecomFindUniqueArgs";
import { CreateTelecomArgs } from "./CreateTelecomArgs";
import { UpdateTelecomArgs } from "./UpdateTelecomArgs";
import { DeleteTelecomArgs } from "./DeleteTelecomArgs";
import { Salarie } from "../../salarie/base/Salarie";
import { TelecomService } from "../telecom.service";
@graphql.Resolver(() => Telecom)
export class TelecomResolverBase {
  constructor(protected readonly service: TelecomService) {}

  async _telecomsMeta(
    @graphql.Args() args: TelecomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Telecom])
  async telecoms(
    @graphql.Args() args: TelecomFindManyArgs
  ): Promise<Telecom[]> {
    return this.service.telecoms(args);
  }

  @graphql.Query(() => Telecom, { nullable: true })
  async telecom(
    @graphql.Args() args: TelecomFindUniqueArgs
  ): Promise<Telecom | null> {
    const result = await this.service.telecom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Telecom)
  async createTelecom(
    @graphql.Args() args: CreateTelecomArgs
  ): Promise<Telecom> {
    return await this.service.createTelecom({
      ...args,
      data: {
        ...args.data,

        salarie: args.data.salarie
          ? {
              connect: args.data.salarie,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Telecom)
  async updateTelecom(
    @graphql.Args() args: UpdateTelecomArgs
  ): Promise<Telecom | null> {
    try {
      return await this.service.updateTelecom({
        ...args,
        data: {
          ...args.data,

          salarie: args.data.salarie
            ? {
                connect: args.data.salarie,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Telecom)
  async deleteTelecom(
    @graphql.Args() args: DeleteTelecomArgs
  ): Promise<Telecom | null> {
    try {
      return await this.service.deleteTelecom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Salarie, {
    nullable: true,
    name: "salarie",
  })
  async getSalarie(@graphql.Parent() parent: Telecom): Promise<Salarie | null> {
    const result = await this.service.getSalarie(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
