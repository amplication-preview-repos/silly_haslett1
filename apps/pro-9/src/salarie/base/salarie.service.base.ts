/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Salarie as PrismaSalarie,
  Telecom as PrismaTelecom,
  Affectation as PrismaAffectation,
  Federation as PrismaFederation,
  Identite as PrismaIdentite,
  Adresse as PrismaAdresse,
} from "@prisma/client";

export class SalarieServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SalarieCountArgs, "select">): Promise<number> {
    return this.prisma.salarie.count(args);
  }

  async salaries(args: Prisma.SalarieFindManyArgs): Promise<PrismaSalarie[]> {
    return this.prisma.salarie.findMany(args);
  }
  async salarie(
    args: Prisma.SalarieFindUniqueArgs
  ): Promise<PrismaSalarie | null> {
    return this.prisma.salarie.findUnique(args);
  }
  async createSalarie(args: Prisma.SalarieCreateArgs): Promise<PrismaSalarie> {
    return this.prisma.salarie.create(args);
  }
  async updateSalarie(args: Prisma.SalarieUpdateArgs): Promise<PrismaSalarie> {
    return this.prisma.salarie.update(args);
  }
  async deleteSalarie(args: Prisma.SalarieDeleteArgs): Promise<PrismaSalarie> {
    return this.prisma.salarie.delete(args);
  }

  async findTelecoms(
    parentId: string,
    args: Prisma.TelecomFindManyArgs
  ): Promise<PrismaTelecom[]> {
    return this.prisma.salarie
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .telecoms(args);
  }

  async findAffectations(
    parentId: string,
    args: Prisma.AffectationFindManyArgs
  ): Promise<PrismaAffectation[]> {
    return this.prisma.salarie
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .affectations(args);
  }

  async findFederation(
    parentId: string,
    args: Prisma.FederationFindManyArgs
  ): Promise<PrismaFederation[]> {
    return this.prisma.salarie
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .federation(args);
  }

  async getIdentite(parentId: string): Promise<PrismaIdentite | null> {
    return this.prisma.salarie
      .findUnique({
        where: { id: parentId },
      })
      .identite();
  }

  async getDomiciliation(parentId: string): Promise<PrismaAdresse | null> {
    return this.prisma.salarie
      .findUnique({
        where: { id: parentId },
      })
      .domiciliation();
  }

  async getDemenagement(parentId: string): Promise<PrismaAdresse | null> {
    return this.prisma.salarie
      .findUnique({
        where: { id: parentId },
      })
      .demenagement();
  }
}
