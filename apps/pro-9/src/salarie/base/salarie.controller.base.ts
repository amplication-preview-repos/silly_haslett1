/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalarieService } from "../salarie.service";
import { SalarieCreateInput } from "./SalarieCreateInput";
import { Salarie } from "./Salarie";
import { SalarieFindManyArgs } from "./SalarieFindManyArgs";
import { SalarieWhereUniqueInput } from "./SalarieWhereUniqueInput";
import { SalarieUpdateInput } from "./SalarieUpdateInput";
import { TelecomFindManyArgs } from "../../telecom/base/TelecomFindManyArgs";
import { Telecom } from "../../telecom/base/Telecom";
import { TelecomWhereUniqueInput } from "../../telecom/base/TelecomWhereUniqueInput";
import { AffectationFindManyArgs } from "../../affectation/base/AffectationFindManyArgs";
import { Affectation } from "../../affectation/base/Affectation";
import { AffectationWhereUniqueInput } from "../../affectation/base/AffectationWhereUniqueInput";
import { FederationFindManyArgs } from "../../federation/base/FederationFindManyArgs";
import { Federation } from "../../federation/base/Federation";
import { FederationWhereUniqueInput } from "../../federation/base/FederationWhereUniqueInput";

export class SalarieControllerBase {
  constructor(protected readonly service: SalarieService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Salarie })
  async createSalarie(
    @common.Body() data: SalarieCreateInput
  ): Promise<Salarie> {
    return await this.service.createSalarie({
      data: {
        ...data,

        identite: data.identite
          ? {
              connect: data.identite,
            }
          : undefined,

        domiciliation: {
          connect: data.domiciliation,
        },

        demenagement: data.demenagement
          ? {
              connect: data.demenagement,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        identite: {
          select: {
            id: true,
          },
        },

        domiciliation: {
          select: {
            id: true,
          },
        },

        demenagement: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Salarie] })
  @ApiNestedQuery(SalarieFindManyArgs)
  async salaries(@common.Req() request: Request): Promise<Salarie[]> {
    const args = plainToClass(SalarieFindManyArgs, request.query);
    return this.service.salaries({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        identite: {
          select: {
            id: true,
          },
        },

        domiciliation: {
          select: {
            id: true,
          },
        },

        demenagement: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Salarie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async salarie(
    @common.Param() params: SalarieWhereUniqueInput
  ): Promise<Salarie | null> {
    const result = await this.service.salarie({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        identite: {
          select: {
            id: true,
          },
        },

        domiciliation: {
          select: {
            id: true,
          },
        },

        demenagement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Salarie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSalarie(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() data: SalarieUpdateInput
  ): Promise<Salarie | null> {
    try {
      return await this.service.updateSalarie({
        where: params,
        data: {
          ...data,

          identite: data.identite
            ? {
                connect: data.identite,
              }
            : undefined,

          domiciliation: {
            connect: data.domiciliation,
          },

          demenagement: data.demenagement
            ? {
                connect: data.demenagement,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          identite: {
            select: {
              id: true,
            },
          },

          domiciliation: {
            select: {
              id: true,
            },
          },

          demenagement: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Salarie })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSalarie(
    @common.Param() params: SalarieWhereUniqueInput
  ): Promise<Salarie | null> {
    try {
      return await this.service.deleteSalarie({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          identite: {
            select: {
              id: true,
            },
          },

          domiciliation: {
            select: {
              id: true,
            },
          },

          demenagement: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/telecoms")
  @ApiNestedQuery(TelecomFindManyArgs)
  async findTelecoms(
    @common.Req() request: Request,
    @common.Param() params: SalarieWhereUniqueInput
  ): Promise<Telecom[]> {
    const query = plainToClass(TelecomFindManyArgs, request.query);
    const results = await this.service.findTelecoms(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        typeMoyen: true,

        salarie: {
          select: {
            id: true,
          },
        },

        valeurMoyen: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/telecoms")
  async connectTelecoms(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: TelecomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      telecoms: {
        connect: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/telecoms")
  async updateTelecoms(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: TelecomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      telecoms: {
        set: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/telecoms")
  async disconnectTelecoms(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: TelecomWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      telecoms: {
        disconnect: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/affectations")
  @ApiNestedQuery(AffectationFindManyArgs)
  async findAffectations(
    @common.Req() request: Request,
    @common.Param() params: SalarieWhereUniqueInput
  ): Promise<Affectation[]> {
    const query = plainToClass(AffectationFindManyArgs, request.query);
    const results = await this.service.findAffectations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        activite: true,

        salarie: {
          select: {
            id: true,
          },
        },

        association: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/affectations")
  async connectAffectations(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: AffectationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      affectations: {
        connect: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/affectations")
  async updateAffectations(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: AffectationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      affectations: {
        set: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/affectations")
  async disconnectAffectations(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: AffectationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      affectations: {
        disconnect: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/federation")
  @ApiNestedQuery(FederationFindManyArgs)
  async findFederation(
    @common.Req() request: Request,
    @common.Param() params: SalarieWhereUniqueInput
  ): Promise<Federation[]> {
    const query = plainToClass(FederationFindManyArgs, request.query);
    const results = await this.service.findFederation(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/federation")
  async connectFederation(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: FederationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      federation: {
        connect: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/federation")
  async updateFederation(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: FederationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      federation: {
        set: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/federation")
  async disconnectFederation(
    @common.Param() params: SalarieWhereUniqueInput,
    @common.Body() body: FederationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      federation: {
        disconnect: body,
      },
    };
    await this.service.updateSalarie({
      where: params,
      data,
      select: { id: true },
    });
  }
}
