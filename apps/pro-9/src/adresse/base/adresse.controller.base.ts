/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdresseService } from "../adresse.service";
import { AdresseCreateInput } from "./AdresseCreateInput";
import { Adresse } from "./Adresse";
import { AdresseFindManyArgs } from "./AdresseFindManyArgs";
import { AdresseWhereUniqueInput } from "./AdresseWhereUniqueInput";
import { AdresseUpdateInput } from "./AdresseUpdateInput";
import { SalarieFindManyArgs } from "../../salarie/base/SalarieFindManyArgs";
import { Salarie } from "../../salarie/base/Salarie";
import { SalarieWhereUniqueInput } from "../../salarie/base/SalarieWhereUniqueInput";

export class AdresseControllerBase {
  constructor(protected readonly service: AdresseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Adresse })
  async createAdresse(
    @common.Body() data: AdresseCreateInput
  ): Promise<Adresse> {
    return await this.service.createAdresse({
      data: {
        ...data,

        informationPostale: data.informationPostale
          ? {
              connect: data.informationPostale,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        debutValidite: true,
        finValidite: true,

        informationPostale: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Adresse] })
  @ApiNestedQuery(AdresseFindManyArgs)
  async adresses(@common.Req() request: Request): Promise<Adresse[]> {
    const args = plainToClass(AdresseFindManyArgs, request.query);
    return this.service.adresses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        debutValidite: true,
        finValidite: true,

        informationPostale: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Adresse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adresse(
    @common.Param() params: AdresseWhereUniqueInput
  ): Promise<Adresse | null> {
    const result = await this.service.adresse({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        debutValidite: true,
        finValidite: true,

        informationPostale: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Adresse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdresse(
    @common.Param() params: AdresseWhereUniqueInput,
    @common.Body() data: AdresseUpdateInput
  ): Promise<Adresse | null> {
    try {
      return await this.service.updateAdresse({
        where: params,
        data: {
          ...data,

          informationPostale: data.informationPostale
            ? {
                connect: data.informationPostale,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          debutValidite: true,
          finValidite: true,

          informationPostale: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Adresse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdresse(
    @common.Param() params: AdresseWhereUniqueInput
  ): Promise<Adresse | null> {
    try {
      return await this.service.deleteAdresse({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          debutValidite: true,
          finValidite: true,

          informationPostale: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/salariesDomiciliees")
  @ApiNestedQuery(SalarieFindManyArgs)
  async findSalariesDomiciliees(
    @common.Req() request: Request,
    @common.Param() params: AdresseWhereUniqueInput
  ): Promise<Salarie[]> {
    const query = plainToClass(SalarieFindManyArgs, request.query);
    const results = await this.service.findSalariesDomiciliees(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        identite: {
          select: {
            id: true,
          },
        },

        domiciliation: {
          select: {
            id: true,
          },
        },

        demenagement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salariesDomiciliees")
  async connectSalariesDomiciliees(
    @common.Param() params: AdresseWhereUniqueInput,
    @common.Body() body: SalarieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salariesDomiciliees: {
        connect: body,
      },
    };
    await this.service.updateAdresse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salariesDomiciliees")
  async updateSalariesDomiciliees(
    @common.Param() params: AdresseWhereUniqueInput,
    @common.Body() body: SalarieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salariesDomiciliees: {
        set: body,
      },
    };
    await this.service.updateAdresse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salariesDomiciliees")
  async disconnectSalariesDomiciliees(
    @common.Param() params: AdresseWhereUniqueInput,
    @common.Body() body: SalarieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salariesDomiciliees: {
        disconnect: body,
      },
    };
    await this.service.updateAdresse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/salarieesHebergees")
  @ApiNestedQuery(SalarieFindManyArgs)
  async findSalarieesHebergees(
    @common.Req() request: Request,
    @common.Param() params: AdresseWhereUniqueInput
  ): Promise<Salarie[]> {
    const query = plainToClass(SalarieFindManyArgs, request.query);
    const results = await this.service.findSalarieesHebergees(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        identite: {
          select: {
            id: true,
          },
        },

        domiciliation: {
          select: {
            id: true,
          },
        },

        demenagement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salarieesHebergees")
  async connectSalarieesHebergees(
    @common.Param() params: AdresseWhereUniqueInput,
    @common.Body() body: SalarieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salarieesHebergees: {
        connect: body,
      },
    };
    await this.service.updateAdresse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salarieesHebergees")
  async updateSalarieesHebergees(
    @common.Param() params: AdresseWhereUniqueInput,
    @common.Body() body: SalarieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salarieesHebergees: {
        set: body,
      },
    };
    await this.service.updateAdresse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salarieesHebergees")
  async disconnectSalarieesHebergees(
    @common.Param() params: AdresseWhereUniqueInput,
    @common.Body() body: SalarieWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salarieesHebergees: {
        disconnect: body,
      },
    };
    await this.service.updateAdresse({
      where: params,
      data,
      select: { id: true },
    });
  }
}
