/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Adresse } from "./Adresse";
import { AdresseCountArgs } from "./AdresseCountArgs";
import { AdresseFindManyArgs } from "./AdresseFindManyArgs";
import { AdresseFindUniqueArgs } from "./AdresseFindUniqueArgs";
import { CreateAdresseArgs } from "./CreateAdresseArgs";
import { UpdateAdresseArgs } from "./UpdateAdresseArgs";
import { DeleteAdresseArgs } from "./DeleteAdresseArgs";
import { SalarieFindManyArgs } from "../../salarie/base/SalarieFindManyArgs";
import { Salarie } from "../../salarie/base/Salarie";
import { InformationPostale } from "../../informationPostale/base/InformationPostale";
import { AdresseService } from "../adresse.service";
@graphql.Resolver(() => Adresse)
export class AdresseResolverBase {
  constructor(protected readonly service: AdresseService) {}

  async _adressesMeta(
    @graphql.Args() args: AdresseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Adresse])
  async adresses(
    @graphql.Args() args: AdresseFindManyArgs
  ): Promise<Adresse[]> {
    return this.service.adresses(args);
  }

  @graphql.Query(() => Adresse, { nullable: true })
  async adresse(
    @graphql.Args() args: AdresseFindUniqueArgs
  ): Promise<Adresse | null> {
    const result = await this.service.adresse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Adresse)
  async createAdresse(
    @graphql.Args() args: CreateAdresseArgs
  ): Promise<Adresse> {
    return await this.service.createAdresse({
      ...args,
      data: {
        ...args.data,

        informationPostale: args.data.informationPostale
          ? {
              connect: args.data.informationPostale,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Adresse)
  async updateAdresse(
    @graphql.Args() args: UpdateAdresseArgs
  ): Promise<Adresse | null> {
    try {
      return await this.service.updateAdresse({
        ...args,
        data: {
          ...args.data,

          informationPostale: args.data.informationPostale
            ? {
                connect: args.data.informationPostale,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Adresse)
  async deleteAdresse(
    @graphql.Args() args: DeleteAdresseArgs
  ): Promise<Adresse | null> {
    try {
      return await this.service.deleteAdresse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Salarie], { name: "salariesDomiciliees" })
  async findSalariesDomiciliees(
    @graphql.Parent() parent: Adresse,
    @graphql.Args() args: SalarieFindManyArgs
  ): Promise<Salarie[]> {
    const results = await this.service.findSalariesDomiciliees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Salarie], { name: "salarieesHebergees" })
  async findSalarieesHebergees(
    @graphql.Parent() parent: Adresse,
    @graphql.Args() args: SalarieFindManyArgs
  ): Promise<Salarie[]> {
    const results = await this.service.findSalarieesHebergees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => InformationPostale, {
    nullable: true,
    name: "informationPostale",
  })
  async getInformationPostale(
    @graphql.Parent() parent: Adresse
  ): Promise<InformationPostale | null> {
    const result = await this.service.getInformationPostale(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
