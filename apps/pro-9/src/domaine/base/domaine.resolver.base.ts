/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Domaine } from "./Domaine";
import { DomaineCountArgs } from "./DomaineCountArgs";
import { DomaineFindManyArgs } from "./DomaineFindManyArgs";
import { DomaineFindUniqueArgs } from "./DomaineFindUniqueArgs";
import { CreateDomaineArgs } from "./CreateDomaineArgs";
import { UpdateDomaineArgs } from "./UpdateDomaineArgs";
import { DeleteDomaineArgs } from "./DeleteDomaineArgs";
import { Association } from "../../association/base/Association";
import { DomaineService } from "../domaine.service";
@graphql.Resolver(() => Domaine)
export class DomaineResolverBase {
  constructor(protected readonly service: DomaineService) {}

  async _domainesMeta(
    @graphql.Args() args: DomaineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Domaine])
  async domaines(
    @graphql.Args() args: DomaineFindManyArgs
  ): Promise<Domaine[]> {
    return this.service.domaines(args);
  }

  @graphql.Query(() => Domaine, { nullable: true })
  async domaine(
    @graphql.Args() args: DomaineFindUniqueArgs
  ): Promise<Domaine | null> {
    const result = await this.service.domaine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Domaine)
  async createDomaine(
    @graphql.Args() args: CreateDomaineArgs
  ): Promise<Domaine> {
    return await this.service.createDomaine({
      ...args,
      data: {
        ...args.data,

        association: args.data.association
          ? {
              connect: args.data.association,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Domaine)
  async updateDomaine(
    @graphql.Args() args: UpdateDomaineArgs
  ): Promise<Domaine | null> {
    try {
      return await this.service.updateDomaine({
        ...args,
        data: {
          ...args.data,

          association: args.data.association
            ? {
                connect: args.data.association,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Domaine)
  async deleteDomaine(
    @graphql.Args() args: DeleteDomaineArgs
  ): Promise<Domaine | null> {
    try {
      return await this.service.deleteDomaine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Association, {
    nullable: true,
    name: "association",
  })
  async getAssociation(
    @graphql.Parent() parent: Domaine
  ): Promise<Association | null> {
    const result = await this.service.getAssociation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
