/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DomaineService } from "../domaine.service";
import { DomaineCreateInput } from "./DomaineCreateInput";
import { Domaine } from "./Domaine";
import { DomaineFindManyArgs } from "./DomaineFindManyArgs";
import { DomaineWhereUniqueInput } from "./DomaineWhereUniqueInput";
import { DomaineUpdateInput } from "./DomaineUpdateInput";

export class DomaineControllerBase {
  constructor(protected readonly service: DomaineService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Domaine })
  async createDomaine(
    @common.Body() data: DomaineCreateInput
  ): Promise<Domaine> {
    return await this.service.createDomaine({
      data: {
        ...data,

        association: data.association
          ? {
              connect: data.association,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        association: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Domaine] })
  @ApiNestedQuery(DomaineFindManyArgs)
  async domaines(@common.Req() request: Request): Promise<Domaine[]> {
    const args = plainToClass(DomaineFindManyArgs, request.query);
    return this.service.domaines({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        association: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Domaine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async domaine(
    @common.Param() params: DomaineWhereUniqueInput
  ): Promise<Domaine | null> {
    const result = await this.service.domaine({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        association: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Domaine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDomaine(
    @common.Param() params: DomaineWhereUniqueInput,
    @common.Body() data: DomaineUpdateInput
  ): Promise<Domaine | null> {
    try {
      return await this.service.updateDomaine({
        where: params,
        data: {
          ...data,

          association: data.association
            ? {
                connect: data.association,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          association: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Domaine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDomaine(
    @common.Param() params: DomaineWhereUniqueInput
  ): Promise<Domaine | null> {
    try {
      return await this.service.deleteDomaine({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          association: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
